#!/usr/bin/env python3
"""
Verificaci√≥n de componentes instalados para an√°lisis completo de metadatos
"""

import sys
import os
import importlib
import json
from pathlib import Path

def check_component(module_name, description, required=True):
    """
    Verificar si un componente est√° instalado
    """
    try:
        module = importlib.import_module(module_name)
        version = getattr(module, '__version__', 'Unknown')
        status = "‚úÖ INSTALADO"
        return {
            'name': module_name,
            'description': description,
            'status': 'installed',
            'version': version,
            'required': required,
            'symbol': '‚úÖ'
        }
    except ImportError:
        status = "‚ùå NO INSTALADO" if required else "‚ö†Ô∏è  OPCIONAL"
        return {
            'name': module_name,
            'description': description,
            'status': 'missing' if required else 'optional',
            'version': None,
            'required': required,
            'symbol': '‚ùå' if required else '‚ö†Ô∏è'
        }

def check_python_version():
    """
    Verificar versi√≥n de Python
    """
    version = sys.version_info
    print(f"üêç Python Version: {version.major}.{version.minor}.{version.micro}")
    
    if version.major == 3 and version.minor >= 8:
        print("‚úÖ Versi√≥n de Python compatible")
        return True
    else:
        print("‚ùå Versi√≥n de Python no compatible (requiere Python 3.8+)")
        return False

def analyze_components_for_stl():
    """
    Analizar componentes para an√°lisis STL
    """
    print("\nüìä AN√ÅLISIS DE COMPONENTES PARA STL")
    print("=" * 50)
    
    # Componentes b√°sicos para STL
    components = [
        ('numpy', 'C√°lculos num√©ricos para geometr√≠a y matrices', True),
        ('struct', 'Lectura de archivos binarios STL', True),
        ('json', 'Serializaci√≥n de resultados', True),
        ('pathlib', 'Manipulaci√≥n de rutas de archivos', True),
        ('time', 'Medici√≥n de tiempos de an√°lisis', True),
        ('traceback', 'Manejo de errores detallado', True),
        ('codecs', 'Manejo de encodings para STL ASCII', True),
        ('scipy', 'C√°lculos avanzados de geometr√≠a', False),
        ('matplotlib', 'Visualizaci√≥n de geometr√≠a', False),
        ('trimesh', 'An√°lisis avanzado de mallas', False),
        ('open3d', 'Procesamiento de nubes de puntos', False),
        ('vtk', 'Visualizaci√≥n 3D avanzada', False),
        ('pyvista', 'Interfaz simplificada para VTK', False),
    ]
    
    results = []
    for name, desc, required in components:
        result = check_component(name, desc, required)
        results.append(result)
        print(f"{result['symbol']} {result['name']:<12} - {result['description']}")
        if result['version'] and result['version'] != 'Unknown':
            print(f"{'':16} Versi√≥n: {result['version']}")
    
    return results

def analyze_components_for_step():
    """
    Analizar componentes para an√°lisis STEP
    """
    print("\n‚öôÔ∏è  AN√ÅLISIS DE COMPONENTES PARA STEP")
    print("=" * 50)
    
    components = [
        ('pythonocc-core', 'An√°lisis completo STEP/BREP', False),
        ('OCC', 'OpenCASCADE bindings', False),
        ('FreeCAD', 'An√°lisis CAD alternativo', False),
        ('ezdxf', 'An√°lisis de archivos DXF', False),
        ('re', 'An√°lisis de texto STEP', True),
        ('os', 'Operaciones del sistema', True),
    ]
    
    results = []
    for name, desc, required in components:
        result = check_component(name, desc, required)
        results.append(result)
        print(f"{result['symbol']} {result['name']:<15} - {result['description']}")
        if result['version'] and result['version'] != 'Unknown':
            print(f"{'':19} Versi√≥n: {result['version']}")
    
    return results

def analyze_components_for_other_formats():
    """
    Analizar componentes para otros formatos
    """
    print("\nüé® AN√ÅLISIS DE COMPONENTES PARA OTROS FORMATOS")
    print("=" * 50)
    
    components = [
        ('ezdxf', 'An√°lisis de archivos DXF/DWG', False),
        ('subprocess', 'Ejecuci√≥n de Ghostscript para AI/EPS', True),
        ('Pillow', 'Procesamiento de im√°genes', False),
        ('reportlab', 'An√°lisis de PDF', False),
        ('cairosvg', 'Procesamiento de SVG', False),
    ]
    
    results = []
    for name, desc, required in components:
        result = check_component(name, desc, required)
        results.append(result)
        print(f"{result['symbol']} {result['name']:<12} - {result['description']}")
        if result['version'] and result['version'] != 'Unknown':
            print(f"{'':16} Versi√≥n: {result['version']}")
    
    return results

def evaluate_completeness(all_results):
    """
    Evaluar qu√© tan completo est√° el sistema
    """
    print("\nüéØ EVALUACI√ìN DE COMPLETITUD")
    print("=" * 50)
    
    required_installed = sum(1 for r in all_results if r['required'] and r['status'] == 'installed')
    required_total = sum(1 for r in all_results if r['required'])
    
    optional_installed = sum(1 for r in all_results if not r['required'] and r['status'] == 'installed')
    optional_total = sum(1 for r in all_results if not r['required'])
    
    print(f"üìã Componentes requeridos: {required_installed}/{required_total}")
    print(f"üìã Componentes opcionales: {optional_installed}/{optional_total}")
    
    # Capacidades espec√≠ficas
    print(f"\nüîß CAPACIDADES DISPONIBLES:")
    
    # STL
    stl_basic = any(r['name'] == 'numpy' and r['status'] == 'installed' for r in all_results)
    print(f"{'‚úÖ' if stl_basic else '‚ùå'} An√°lisis STL b√°sico (dimensiones, √°rea, volumen)")
    
    # STEP
    step_advanced = any(r['name'] == 'pythonocc-core' and r['status'] == 'installed' for r in all_results)
    step_basic = any(r['name'] == 're' and r['status'] == 'installed' for r in all_results)
    print(f"{'‚úÖ' if step_advanced else '‚ö†Ô∏è'} An√°lisis STEP {'avanzado' if step_advanced else 'b√°sico'}")
    
    # DXF/DWG
    dxf_support = any(r['name'] == 'ezdxf' and r['status'] == 'installed' for r in all_results)
    print(f"{'‚úÖ' if dxf_support else '‚ùå'} An√°lisis DXF/DWG")
    
    # AI/EPS
    ai_support = any(r['name'] == 'subprocess' and r['status'] == 'installed' for r in all_results)
    print(f"{'‚úÖ' if ai_support else '‚ùå'} An√°lisis AI/EPS (requiere Ghostscript)")
    
    # Visualizaci√≥n
    viz_support = any(r['name'] in ['vtk', 'pyvista'] and r['status'] == 'installed' for r in all_results)
    print(f"{'‚úÖ' if viz_support else '‚ùå'} Generaci√≥n de previsualizaciones")
    
    # Calcular puntuaci√≥n general
    basic_score = (required_installed / required_total) * 100 if required_total > 0 else 0
    advanced_score = (optional_installed / optional_total) * 100 if optional_total > 0 else 0
    
    print(f"\nüìä PUNTUACI√ìN:")
    print(f"   - Funcionalidad b√°sica: {basic_score:.1f}%")
    print(f"   - Funcionalidad avanzada: {advanced_score:.1f}%")
    
    return {
        'basic_score': basic_score,
        'advanced_score': advanced_score,
        'required_installed': required_installed,
        'required_total': required_total,
        'optional_installed': optional_installed,
        'optional_total': optional_total,
        'capabilities': {
            'stl_basic': stl_basic,
            'step_advanced': step_advanced,
            'step_basic': step_basic,
            'dxf_support': dxf_support,
            'ai_support': ai_support,
            'viz_support': viz_support
        }
    }

def generate_recommendations(evaluation):
    """
    Generar recomendaciones basadas en la evaluaci√≥n
    """
    print(f"\nüí° RECOMENDACIONES")
    print("=" * 50)
    
    capabilities = evaluation['capabilities']
    
    if evaluation['basic_score'] < 100:
        print("üî¥ CR√çTICO: Instalar componentes b√°sicos faltantes")
        print("   - Ejecutar: pip install numpy")
    
    if not capabilities['step_advanced']:
        print("üü° MEJORAR: Para an√°lisis STEP completo:")
        print("   - Ejecutar: conda install -c conda-forge pythonocc-core")
    
    if not capabilities['dxf_support']:
        print("üü° MEJORAR: Para an√°lisis DXF/DWG:")
        print("   - Ejecutar: pip install ezdxf")
    
    if not capabilities['viz_support']:
        print("üü° MEJORAR: Para previsualizaci√≥n:")
        print("   - Ejecutar: conda install -c conda-forge vtk pyvista")
    
    if evaluation['basic_score'] >= 100:
        print("‚úÖ EXCELENTE: Todos los componentes b√°sicos est√°n instalados")
        print("   El sistema puede analizar archivos STL completamente")
    
    if evaluation['advanced_score'] >= 50:
        print("‚úÖ BUENO: Muchos componentes opcionales est√°n disponibles")
    
    print(f"\nüéØ RESUMEN:")
    if evaluation['basic_score'] >= 100:
        print("‚úÖ El sistema est√° listo para an√°lisis de metadatos STL")
    else:
        print("‚ùå El sistema necesita componentes b√°sicos para funcionar")
    
    return evaluation

def main():
    """
    Funci√≥n principal
    """
    print("üîç VERIFICACI√ìN DE COMPONENTES PARA AN√ÅLISIS DE METADATOS")
    print("=" * 60)
    
    # Verificar Python
    if not check_python_version():
        return
    
    # Analizar componentes
    all_results = []
    all_results.extend(analyze_components_for_stl())
    all_results.extend(analyze_components_for_step())
    all_results.extend(analyze_components_for_other_formats())
    
    # Evaluar completitud
    evaluation = evaluate_completeness(all_results)
    
    # Generar recomendaciones
    generate_recommendations(evaluation)
    
    # Guardar reporte
    report = {
        'timestamp': __import__('datetime').datetime.now().isoformat(),
        'python_version': f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
        'components': all_results,
        'evaluation': evaluation
    }
    
    with open('components_report.json', 'w') as f:
        json.dump(report, f, indent=2)
    
    print(f"\nüìÑ Reporte guardado en: components_report.json")

if __name__ == "__main__":
    main()
