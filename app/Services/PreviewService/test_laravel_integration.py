#!/usr/bin/env python3
"""
Test de Integraci√≥n Laravel - Servidor H√≠brido
Verifica que Laravel puede comunicarse correctamente con el servidor h√≠brido
"""

import requests
import json
import os
import time

print("=== TEST DE INTEGRACI√ìN LARAVEL ===")
print()

# Configuraci√≥n
SERVER_URL = "http://localhost:8052"
STL_FILE = r"C:\xampp\htdocs\laravel\Pollux_3D\c1bc34d4-df6e-4caa-900e-5a0d70b41c3c.STL"
PREVIEWS_DIR = r"C:\xampp\htdocs\laravel\Pollux_3D\app\storage\app\previews"

def test_server_health():
    """Test 1: Verificar que el servidor est√© respondiendo"""
    print("1. Verificando salud del servidor...")
    try:
        response = requests.get(f"{SERVER_URL}/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Servidor saludable")
            print(f"   ‚úÖ Status: {data['status']}")
            for dep, status in data['dependencies'].items():
                status_icon = "‚úÖ" if status else "‚ùå"
                print(f"   {status_icon} {dep}: {status}")
            return True
        else:
            print(f"   ‚ùå Error de salud: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå Error conectando al servidor: {e}")
        return False

def test_stl_file_exists():
    """Test 2: Verificar que el archivo STL existe"""
    print("\n2. Verificando archivo STL...")
    if os.path.exists(STL_FILE):
        size = os.path.getsize(STL_FILE)
        print(f"   ‚úÖ Archivo STL encontrado: {STL_FILE}")
        print(f"   ‚úÖ Tama√±o: {size:,} bytes")
        return True
    else:
        print(f"   ‚ùå Archivo STL no encontrado: {STL_FILE}")
        return False

def test_preview_generation():
    """Test 3: Generar preview usando el endpoint Laravel-compatible"""
    print("\n3. Probando generaci√≥n de preview (endpoint Laravel)...")
    try:
        # Datos que Laravel env√≠a al servidor
        payload = {
            "file_path": STL_FILE,
            "preview_type": "2d",
            "width": 800,
            "height": 600,
            "file_id": "test_laravel_integration",
            "background_color": "#FFFFFF",
            "file_type": "stl"
        }
        
        # Usar el endpoint con gui√≥n bajo (Laravel compatible)
        response = requests.post(f"{SERVER_URL}/generate_preview", 
                               json=payload, 
                               timeout=30,
                               headers={"Content-Type": "application/json"})
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Preview generado exitosamente")
            print(f"   ‚úÖ Archivo: {data['preview_filename']}")
            print(f"   ‚úÖ URL: {data['preview_url']}")
            print(f"   ‚úÖ Generador: {data['generator']}")
            
            # Verificar que la imagen se cre√≥
            preview_path = os.path.join(PREVIEWS_DIR, data['preview_filename'])
            if os.path.exists(preview_path):
                size = os.path.getsize(preview_path)
                print(f"   ‚úÖ Imagen verificada: {size:,} bytes")
                return True, data['preview_filename']
            else:
                print(f"   ‚ùå Imagen no encontrada en: {preview_path}")
                return False, None
        else:
            print(f"   ‚ùå Error generando preview: {response.status_code}")
            print(f"   ‚ùå Respuesta: {response.text}")
            return False, None
            
    except Exception as e:
        print(f"   ‚ùå Error en generaci√≥n: {e}")
        return False, None

def test_preview_access(filename):
    """Test 4: Verificar acceso a la imagen generada"""
    print("\n4. Probando acceso a imagen generada...")
    try:
        response = requests.get(f"{SERVER_URL}/preview/{filename}", timeout=10)
        if response.status_code == 200:
            print(f"   ‚úÖ Imagen accesible v√≠a HTTP")
            print(f"   ‚úÖ Content-Type: {response.headers.get('content-type', 'unknown')}")
            print(f"   ‚úÖ Tama√±o descargado: {len(response.content):,} bytes")
            return True
        else:
            print(f"   ‚ùå Error accediendo imagen: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå Error accediendo imagen: {e}")
        return False

def main():
    """Ejecutar todos los tests"""
    tests_passed = 0
    total_tests = 4
    
    # Test 1: Salud del servidor
    if test_server_health():
        tests_passed += 1
    
    # Test 2: Archivo STL
    if test_stl_file_exists():
        tests_passed += 1
    
    # Test 3: Generaci√≥n de preview
    success, filename = test_preview_generation()
    if success:
        tests_passed += 1
        
        # Test 4: Acceso a imagen (solo si se gener√≥)
        if test_preview_access(filename):
            tests_passed += 1
    
    # Resultado final
    print(f"\n=== RESULTADO FINAL ===")
    print(f"Tests pasados: {tests_passed}/{total_tests}")
    
    if tests_passed == total_tests:
        print("üéâ ¬°INTEGRACI√ìN LARAVEL EXITOSA!")
        print("‚úÖ Las vistas 2D se est√°n generando correctamente")
        print("‚úÖ Laravel puede comunicarse con el servidor h√≠brido")
        print("‚úÖ El problema original est√° RESUELTO")
    else:
        print("‚ùå Algunos tests fallaron")
        print("üîß Revisar la configuraci√≥n")
    
    print()

if __name__ == "__main__":
    main()
