<?php

// Prueba espec√≠fica para el archivo ID 21 que fall√≥
echo "üîç PRUEBA ESPEC√çFICA - ARCHIVO ID 21\n";
echo "===================================\n";

// Archivo exacto que fall√≥
$filePathForCmd = "storage\\app\\models\\1\\51ef900f-b335-4019-8343-9c3c15a1c026.STL";
$batchScript = __DIR__ . '/run_manufacturing_analyzer.bat';

echo "üîß Configuraci√≥n:\n";
echo "Script batch: {$batchScript}\n";
echo "Archivo: {$filePathForCmd}\n\n";

echo "üöÄ Ejecutando an√°lisis usando Symfony Process (igual que Laravel)...\n";

require_once __DIR__ . '/vendor/autoload.php';
use Symfony\Component\Process\Process;

$process = new Process([$batchScript, $filePathForCmd]);
$process->setWorkingDirectory(__DIR__);
$process->setTimeout(120);

$start = microtime(true);
$process->run();
$duration = microtime(true) - $start;

echo "‚è±Ô∏è Tiempo: " . round($duration, 2) . "s\n";
echo "üîÑ Exit code: " . $process->getExitCode() . "\n";
echo "üìä Output length: " . strlen($process->getOutput()) . " chars\n";
echo "üö® Error length: " . strlen($process->getErrorOutput()) . " chars\n\n";

if ($process->isSuccessful()) {
    $output = $process->getOutput();
    $result = json_decode($output, true);
    
    if (json_last_error() === JSON_ERROR_NONE) {
        echo "‚úÖ AN√ÅLISIS EXITOSO!\n";
        
        if (isset($result['manufacturing']['weight_estimates'])) {
            $materials = array_keys($result['manufacturing']['weight_estimates']);
            echo "‚öñÔ∏è Materiales (" . count($materials) . "): " . implode(', ', $materials) . "\n";
            
            if (count($materials) >= 11) {
                echo "üéâ ¬°PERFECTO! Los 11 materiales se generaron correctamente\n";
            } else {
                echo "‚ö†Ô∏è Solo " . count($materials) . " materiales (esperados: 11)\n";
            }
        } else {
            echo "‚ùå No hay weight_estimates\n";
            echo "üîç Resultado disponible:\n";
            print_r(array_keys($result));
        }
    } else {
        echo "‚ùå Error JSON: " . json_last_error_msg() . "\n";
        echo "üìù Output recibido:\n";
        echo substr($output, 0, 500) . "...\n";
    }
} else {
    echo "‚ùå PROCESO FALL√ì!\n";
    echo "üö® Exit code: " . $process->getExitCode() . "\n";
    echo "üì§ Output: " . $process->getOutput() . "\n";
    echo "‚ùó Error: " . $process->getErrorOutput() . "\n";
    
    // Analizar el error espec√≠fico
    $error = $process->getErrorOutput();
    if (strpos($error, 'Traceback') !== false) {
        echo "üêç Error de Python detectado\n";
    }
    if (strpos($error, 'HashRandomization') !== false) {
        echo "üîß Error de inicializaci√≥n de Python - necesita PYTHONHASHSEED=0\n";
    }
}

echo "\n=== COMPARACI√ìN DIRECTA ===\n";
echo "Desde consola funciona perfectamente\n";
echo "Desde PHP/Laravel falla - investigar contexto de ejecuci√≥n\n";
