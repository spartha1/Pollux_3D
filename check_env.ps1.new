# Limpiar y configurar entorno Python
Write-Host "Cleaning up Python environments..." -ForegroundColor Green

# Cargar el script de inicializaci贸n de Conda
$initScript = Join-Path $PSScriptRoot "init_conda.ps1"
if (-not (Test-Path $initScript)) {
    Write-Host "Error: Could not find init_conda.ps1" -ForegroundColor Red
    exit 1
}

. $initScript

# Buscar conda.exe
$condaPath = Get-Command conda -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source
if (-not $condaPath) {
    Write-Host "Error: Conda initialization failed" -ForegroundColor Red
    exit 1
}

Write-Host "Found conda at: $condaPath" -ForegroundColor Green

# Agregar Conda al PATH para esta sesi贸n
$condaDir = Split-Path (Split-Path $condaPath)
$env:PATH = "$condaDir;$condaDir\Scripts;$condaDir\Library\bin;$env:PATH"

# Desactivar cualquier entorno activo primero
Write-Host "Deactivating any active conda environment..." -ForegroundColor Yellow
& $condaPath "deactivate"

# Verificar el entorno
Write-Host "Checking conda environment..." -ForegroundColor Green

# Verificar si el entorno existe y tiene la versi贸n correcta de Python
$envExists = & $condaPath "env" "list" | Select-String "pollux-preview-env"
if ($envExists) {
    # Verificar la versi贸n de Python en el entorno
    $pythonVersion = & $condaPath "run" "-n" "pollux-preview-env" "python" "--version"
    if ($pythonVersion -notlike "*3.10*") {
        Write-Host "Removing existing environment with incorrect Python version..." -ForegroundColor Yellow
        & $condaPath "env" "remove" "-n" "pollux-preview-env" "-y"
        $envExists = $false
    }
}

if (-not $envExists) {
    Write-Host "Creating conda environment 'pollux-preview-env' with Python 3.10..." -ForegroundColor Yellow
    & $condaPath "create" "-n" "pollux-preview-env" "python=3.10" "-y"
}

# Activar el entorno pollux-preview-env
Write-Host "Activating pollux-preview-env..." -ForegroundColor Yellow
$activateScript = Join-Path (Split-Path $condaPath) "activate.bat"
& $activateScript "pollux-preview-env"

# Instalar dependencias
Write-Host "Installing dependencies..." -ForegroundColor Yellow

# Lista de todas las dependencias necesarias
$condaDeps = @(
    "python=3.10",
    "numpy=1.24.3",
    "pythonocc-core=7.9.0",
    "occt=7.9.0",
    "vtk=9.2.6",
    "pyvista=0.42.3",
    "matplotlib=3.8.0",
    "fastapi=0.104.1",
    "uvicorn=0.24.0",
    "pillow=10.0.1",
    "pydantic=2.4.2",
    "pip"
)

# Intentar instalar todas las dependencias de una vez
Write-Host "Installing all dependencies at once..." -ForegroundColor Yellow
$installArgs = @("install", "-n", "pollux-preview-env", "-c", "conda-forge") + $condaDeps + @("-y")
& $condaPath $installArgs

if ($LASTEXITCODE -ne 0) {
    Write-Host "Bulk installation failed. Trying one by one..." -ForegroundColor Yellow
    
    # Asegurar que tenemos Python y pip
    & $condaPath "install" "-n" "pollux-preview-env" "-c" "conda-forge" "python=3.10" "pip" "-y"
    
    foreach ($dep in $condaDeps) {
        if ($dep -ne "python=3.10" -and $dep -ne "pip") {
            Write-Host "Installing $dep..." -ForegroundColor Yellow
            & $condaPath "install" "-n" "pollux-preview-env" "-c" "conda-forge" "$dep" "-y"
            
            if ($LASTEXITCODE -ne 0) {
                Write-Host "Conda install failed for $dep. Trying pip..." -ForegroundColor Yellow
                $pipName = $dep.Split('=')[0]
                $pipVersion = $dep.Split('=')[1]
                $pythonPath = Join-Path (Split-Path $condaPath) "envs\pollux-preview-env\python.exe"
                & $pythonPath -m pip install --no-cache-dir "${pipName}==${pipVersion}"
            }
        }
    }
}

# Instalamos numpy-stl usando pip para evitar conflictos
Write-Host "Installing STL processing dependencies..." -ForegroundColor Yellow
& $condaPath "run" "-n" "pollux-preview-env" "pip" "install" "numpy-stl==3.0.1"

# Crear archivos temporales para los scripts de prueba
$tempFolder = Join-Path $env:TEMP "pollux_test_scripts"
New-Item -ItemType Directory -Force -Path $tempFolder | Out-Null

$checkPythonPath = Join-Path $tempFolder "check_python.py"
$checkOCC = Join-Path $tempFolder "check_occ.py"
$checkDeps = Join-Path $tempFolder "check_deps.py"

# Script para verificar Python path
@"
import sys
print('Python executable:', sys.executable)
"@ | Out-File -FilePath $checkPythonPath -Encoding utf8

# Script para verificar OCC
@"
import sys
try:
    from OCC import VERSION
    from OCC.Core import VERSION as CORE_VERSION
    from OCC.Core.BRepPrimAPI import BRepPrimAPI_MakeBox
    from OCC.Core.gp import gp_Pnt

    print("pythonocc-core version:", VERSION)
    print("OCC.Core version:", CORE_VERSION)
    
    # Test basic geometry creation
    box = BRepPrimAPI_MakeBox(gp_Pnt(0, 0, 0), 10, 10, 10).Shape()
    print("OCC import and basic geometry test successful!")
except ImportError as e:
    print("Error importing OCC:", str(e))
    sys.exit(1)
except Exception as e:
    print("Error testing OCC functionality:", str(e))
    sys.exit(1)
"@ | Out-File -FilePath $checkOCC -Encoding utf8

# Script para verificar dependencias
@"
import sys
dependencies = {
    "numpy": "numpy",
    "pyvista": "pyvista",
    "fastapi": "fastapi",
    "numpy-stl": "stl",
    "matplotlib": "matplotlib",
    "vtk": "vtk"
}

for module_name, import_name in dependencies.items():
    try:
        module = __import__(import_name)
        version = getattr(module, "__version__", "unknown")
        print(f"{module_name}: {version}")
    except ImportError as e:
        print(f"Error importing {module_name}: {str(e)}")
        sys.exit(1)
"@ | Out-File -FilePath $checkDeps -Encoding utf8

# Ejecutar las verificaciones
Write-Host "`nChecking Python path..." -ForegroundColor Green
& $condaPath "run" "-n" "pollux-preview-env" "python" $checkPythonPath

Write-Host "`nTesting OCC import..." -ForegroundColor Green
& $condaPath "run" "-n" "pollux-preview-env" "python" $checkOCC

Write-Host "`nTesting other dependencies..." -ForegroundColor Green
& $condaPath "run" "-n" "pollux-preview-env" "python" $checkDeps

# Limpiar archivos temporales
Remove-Item -Path $tempFolder -Recurse -Force

Write-Host "`nEnvironment check complete." -ForegroundColor Green
pause
